var app = app || {};console.log('include views/app.js');//overall appView is the top level piece of UI, this is for creation of new todos and rendering of new todos.app.AppView = Backbone.View.extend({ //element is already mentioned in the index.htmlel: '#todoapp',//stats template, for the stats of all, active, completedstatsTemplate: _.template($('#stats-template').html()),//now, lets add the events at initialize method on the todos collection when todos are added or removed.events: { 'keypress #new-todo': 'createOnEnter','click #clear-completed': 'clearCompleted','click #toggle-all': 'toggleAllComplete'},initialize: function(){ console.log('appview what initialized');//added this.allCheckbox = this.$('toggle-all')[0]; this.$input = this.$('#new-todo'); this.$footer = this.$('#footer'); this.$main = this.$('#main');//binding of events to see the changes in collection   this.listenTo(app.Todos, 'add', this.addOne);   this.listenTo(app.Todos, 'reset', this.addAll); // new    this.listenTo(app.Todos, 'change: completed', this.filterOne);    this.listenTo(app.Todos, 'filter', this.filterAll);    this.listenTo(app.Todos, 'all', this.render);    app.Todos.fetch();},render: function(){  var completed = app.Todos.completed().length; var remaining = app.Todos.remaining().length; if(app.Todos.length){    this.$main.show();  this.$footer.show();  this.$footer.html(this.statsTemplate({   completed: completed,   reamaining: remaining  }));   this.$('#filters li a')          .removeClass('selected')          .filter('[href="#/' + ( app.TodoFilter || '' ) + '"]')          .addClass('selected'); }  else{   this.$main.hide();   this.$footer.hide();  }  this.allCheckbox.checked = !remaining;},//append it to the ul, created in index.htmladdOne: function(todo){  var view = new app.TodoView({model: todo}); $('#todo-list').append(view.render().el);},//add all items in the collection at once.addAll: function(){   this.$('#todo-list').html(''); app.Todos.each(this.addOne, this);}, // New    filterOne : function (todo) {      todo.trigger('visible');    },    // New    filterAll : function () {      app.Todos.each(this.filterOne, this);    },  // New    // Generate the attributes for a new Todo item.    newAttributes: function() {      return {        title: this.$input.val().trim(),        order: app.Todos.nextOrder(),        completed: false      };    },    // New    // If you hit return in the main input field, create new Todo model,    // persisting it to localStorage.    createOnEnter: function( event ) {      if ( event.which !== ENTER_KEY || !this.$input.val().trim() ) {        return;      }      app.Todos.create( this.newAttributes() );      this.$input.val('');    },    // New    // Clear all completed todo items, destroying their models.    clearCompleted: function() {      _.invoke(app.Todos.completed(), 'destroy');      return false;    },    // New    toggleAllComplete: function() {      var completed = this.allCheckbox.checked;      app.Todos.each(function( todo ) {        todo.save({          'completed': completed       });  }); }})
